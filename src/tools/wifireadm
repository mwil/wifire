#!/usr/bin/perl

#
# Copyright 2009-2011 Disco Labs, TU Kaiserslautern
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use warnings;
use strict;

use Getopt::Long;
use IO::Socket;

my $ip;
my $help;
my $op_mode; # txrx | jamming | wifire
my ($periods, $lines, $irqs);
my $reset_counters;
my $jam_type;
my $print_status;
my $print_irq;
my $tune;
my $reports;
my $report_power;
my $only_reports;
my $jam_period;
my $idle_period;
my $period_variance=0;

our $sock;

use constant {
	CMD_OPMODE_JAM => 1,
	CMD_OPMODE_TXRX => 2,
	CMD_OPMODE_WIFIRE => 3,
	CMD_SET_JAM_LENGTH => 4,
	CMD_SET_DEBUG => 5,
	CMD_PING => 6,
	CMD_PRINT_COUNTERS => 7,
	CMD_RESET_COUNTERS => 8,
	CMD_SET_JAM_TYPE => 9,

	CMD_REPORT_POWER => 17,
	CMD_UDP_REPORTS => 18,
	CMD_SET_TIMER_PERIODS => 19
};


sub send_cmd {
    my $cmd = shift;
    my @args = @_;
    
    print "Sending Command $cmd\n";
    $sock->send(pack("N*", $cmd, @args)) or die "Could not send package: $!\n";
}

my $f;
sub get_reports {
	my $text;
	
	$SIG{INT} = sub { send_cmd(CMD_UDP_REPORTS, 0); close($sock); close($f); $SIG{INT} = 'DEFAULT'; };

	open($f, ">power") or die $!;
	
	while (1) {
		$sock->recv($text, 512) or die "Could not receive: $!\n";
		my ($cmd, @args) = unpack("N*", $text);
		if ($cmd == 1) {
			printf("SFD at %d tics, power %x %d\n", $args[0], $args[1], $args[1]);
		} elsif ($cmd == 2) {
			my $ftype = $args[1] & 7;
			printf("Packet: Length: %d, Ctrl: %x, Type: %s, Seqno: %d\n", @args[0..1],
				$ftype == 0 ? "BEACON" : $ftype == 1 ? "DATA" : $ftype == 2 ? "ACK" : $ftype == 3 ? "CONTROL" : "??", $args[2]);
			printf("\tDst Mode %d, Dst Pan %x, Dst Addr %x %x\n", ($args[1] >> 10) & 3, @args[3..5]);
			printf("\tSrc Mode %d, Src Pan %x, Src Addr %x %x\n", ($args[1] >> 14), @args[6..8]);
			printf("\tVerdict: %s, Delay %d (%.3f us)\n", $args[9] == 0 ? "ACCEPT" : "JAM", $args[10], $args[10] / 100);
			my $d = ($args[12] - $args[11]) / 100;
			printf("\tDelays: %d %d %.2f %.2f\n", $args[11], $args[12], $args[13]/$args[14], $d);
		} elsif ($cmd == 3) {
			my $t = ($args[1] << 32) | $args[2];
			print $f sprintf("%d %d\n", $t, $args[0]);
		} elsif ($cmd == 4) {
			printf("SFD Counter: %d\n", $args[0]);
		} else {
			print "Error: Reply $cmd not understood\n";
		}
	}
}


GetOptions(
    "help" => \$help,
    "opmode=s" => \$op_mode,
    "periods=i" => \$periods,
    "lines=i" => \$lines,
    "irqs=i" => \$irqs,
    "jam_type=s" => \$jam_type,
    "tune" => \$tune,
    "reset" => \$reset_counters,
    "verbose" => \$print_irq,
    "status" => \$print_status,

    "jam_period=i" => \$jam_period,
    "idle_period=i" => \$idle_period,
    "period_variance=i" => \$period_variance,

#"report_power!" => \$report_power,
    "reports!" => \$reports,

    "only_reports!" => \$only_reports,

    "ip=s" => \$ip
);

# print help message when no options are passed
my $periods_valid = defined $periods || (!defined $lines && !defined $irqs);
my $report_valid = !$report_power || $reports;
$help = $help || 
    !defined($op_mode) && !defined($periods) && !defined($jam_period) && !defined($idle_period) && !defined($period_variance)
    && !defined($jam_type)
    && !$reset_counters && !$print_irq && !$print_status
    && !defined($reports) && !defined($periods)
    && !$only_reports;

if ($help) {
    print <<EOF

Usage: $0 [options]

This tool sets up the WiFire-driven USRP2 over UDP.

Available options are:
    --help		    prints out this text
    --opmode mode	    changes the mode of operation (txrx|jamming|wifire)
    --periods n		    count of buffers which are sent, when jamming a signal
    --jam_type		    tell wifire when to jam (none | sfd | wifire | count | msdu)
    --tune		    tell wifire to go into talkative tuning mode
    --reset		    reset the counters for detected packets
    --verbose		    tell wifire to print the counters on detection
    --status		    prints the counters over uart
    --reports		    gives the tune reports over udp
    --only_reports	    receives reports and displays them
    --ip IP		    use another IP address (default: 192.168.10.2)
    --jam_period n	    specify number of ticks for jamming period (in jamming opmode)
    --idle_period n	    specify number of ticks for idling period (in jamming opmode)
    --period_variance n	    specify maximum variance of idling/jamming periods (default: 0)
EOF
    ;

    exit 0;
}

if ($only_reports) {
  $sock = IO::Socket::INET->new(
    Proto	=> 'udp',
    PeerPort    => '49154',
    PeerAddr    => defined $ip ? $ip : '192.168.10.2',
    LocalPort	=> '49155'
  ) or die "Could not create socket: $!\n";
  get_reports();
  exit 0;
}

# create udp socket
$sock = IO::Socket::INET->new(
  Proto       => "udp",
  PeerPort    => '49154',
  PeerAddr    => defined $ip ? $ip : '192.168.10.2'
) or die "Could not create socket: $!\n";

# first set debug options
send_cmd(CMD_SET_DEBUG, $print_irq ? 1 << 0 : 0) if defined $print_irq;

send_cmd(CMD_REPORT_POWER, 0) if defined($reports) && !$reports;

# setup jam periods
send_cmd(CMD_SET_JAM_LENGTH, $periods, $lines, $irqs) if defined $periods;

# print status
send_cmd(CMD_PRINT_COUNTERS) if $print_status;

# reset counters
send_cmd(CMD_RESET_COUNTERS) if $reset_counters;

# set jam type
send_cmd(CMD_SET_JAM_TYPE,
  ($jam_type eq "wifire" ? 2 : $jam_type eq "sfd" ? 1 : $jam_type eq "count" ? 5 : $jam_type eq "msdu" ? 6 : 0) + 
  ($tune ? 2 : 0)) if defined $jam_type;

# set operation mode
send_cmd($op_mode eq "wifire" ? CMD_OPMODE_WIFIRE :
  ($op_mode eq "jamming" ? CMD_OPMODE_JAM : CMD_OPMODE_TXRX))
  if defined $op_mode;

# turn on power reports
send_cmd(CMD_REPORT_POWER, $report_power ? 1 : 0) if defined($report_power);

# set jam/idle periods
send_cmd(CMD_SET_TIMER_PERIODS, $jam_period, $idle_period, $period_variance) if defined($jam_period) && defined($idle_period && defined($period_variance));

print "Sent settings.\n";

if ($reports) {
	send_cmd(CMD_UDP_REPORTS, 1);
	
	#get_reports();
}

exit 0;
